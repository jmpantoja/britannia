<?php

namespace Britannia\Domain\Entity\Student;


use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use PlanB\DDD\Domain\Model\AggregateRoot;
use PlanB\DDD\Domain\VO\DNI;
use PlanB\DDD\Domain\VO\FullName;
use PlanB\DDD\Domain\VO\PostalAddress;
use PlanB\DDD\Domain\VO\Email;
use PlanB\DDD\Domain\VO\PhoneNumber;

abstract class Student extends AggregateRoot
{
    private $id;

    private $active = true;

    /** @var FullName */
    private $fullName;

    /**
     * @var PostalAddress
     */
    private $address;

    private $birthDate;

    private $email;

    private $relatives;

    private $phoneNumbers;

    private $createdAt;

    private $updatedAt;


    public function __construct()
    {
        $this->relatives = new ArrayCollection();
        $this->id = new StudentId();
        $this->updatedAt = new \DateTimeImmutable();
        $this->createdAt = new \DateTimeImmutable();

        $this->relatives = new ArrayCollection();
        $this->phoneNumbers = [];
//        $this->address = new Address();


    }

    public function getActive(): ?bool
    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;

        return $this;
    }

    /**
     * @return mixed
     */
    public function getType()
    {
        return $this->type;
    }


    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->createdAt;
    }

    public function setCreatedAt(\DateTimeInterface $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeInterface
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(\DateTimeInterface $updatedAt): self
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    public function getId()
    {
        return $this->id;
    }

    /**
     * @return Collection|Student[]
     */
    public function getRelatives(): Collection
    {
        return $this->relatives;
    }

    public function addRelative(Student $relative): self
    {
        if (!$this->relatives->contains($relative)) {
            $this->relatives[] = $relative;
            $relative->addRelative($this);
        }

        return $this;
    }

    public function removeRelative(Student $relative): self
    {
        if ($this->relatives->contains($relative)) {
            $this->relatives->removeElement($relative);
            $relative->removeRelative($this);
        }

        return $this;
    }

    public function __toString()
    {
        return (string)$this->fullName;
    }

    public function getPhoneNumbers(): ?array
    {
        return $this->phoneNumbers;
    }

    public function setPhoneNumbers(array $phoneNumbers): self
    {
        $this->phoneNumbers = [];
        foreach ($phoneNumbers as $phoneNumber) {
            $this->addPhoneNumber($phoneNumber);
        }
        return $this;
    }

    public function addPhoneNumber(PhoneNumber $phoneNumber): self
    {

        $number = (string)$phoneNumber;

        if (!in_array($number, $this->phoneNumbers, true)) {
            $this->phoneNumbers[] = $number;
        }

        return $this;
    }

    public function getBirthDate(): ?\DateTimeInterface
    {
        return $this->birthDate;
    }

    public function setBirthDate(\DateTimeInterface $birthDate): self
    {
        $this->birthDate = $birthDate;

        return $this;
    }

    /**
     * @return Email
     */
    public function getEmail(): ?Email
    {
        return $this->email;
    }

    /**
     * @param Email $email
     * @return Student
     */
    public function setEmail($email): self
    {
        $this->email = $email;
        return $this;
    }

    public function getAddress(): PostalAddress
    {
        return $this->address;
    }

    public function setAddress(PostalAddress $address): self
    {
        $this->address = $address;

        return $this;
    }

    /**
     * @return FullName
     */
    public function getFullName(): FullName
    {
        return $this->fullName;
    }

    /**
     * @param FullName $fullName
     * @return Student
     */
    public function setFullName(?FullName $fullName): self
    {
        $this->fullName = $fullName;
        return $this;
    }

}
